#!/bin/bash

###
# Init script for this project. Creates initial project configuration
###


## VARIABLES

interact="true" # Enable interactive mode

# List of services
enable_service_panel=""
enable_service_node=""
enable_service_db=""
enable_service_le=""
enable_sftp_daemon=""

enable_build_options=""


#Database Options
database_ip_address=""
database_root_password=""

node_directory=""

# Functions

# Returns the help message
function _return_help {
	echo ""
	echo "Pterodactyl Docker Deployment Script"
	echo "Usage: $0 [options]"
	echo ""
	echo "Options:"
	echo ""
	echo " --help  , -h             - returns this screen"
    echo " --enable-panel           - adds panel"
    echo " --enable-db              - adds mysql database"
    echo " --enable-daemon          - adds daemon"
    echo " --enable-letsencrypt     - adds letsencrypt"
    echo " --enable-build-options"
    echo " --db-address"
    echo " --daemon-dir"
	echo ""
}

function build_config {
    local combine_args
    local le_panel
    if [ "$enable_service_panel" == "x" ]; then
        le_panel="true"
        combine_args="./manifest/compose/panel.yml"
    fi
    if [ "$enable_service_node" == "x" ]; then
        combine_args=$combine_args" ./manifest/compose/daemon.yml"
    fi
    if [ "$enable_service_db" == "x" ]; then
        combine_args=$combine_args" ./manifest/compose/db.yml"
    fi
    if [ "$enable_service_le" == "x" ]; then
        echo "enabled"
        if [ "$le_panel" == "true" ]; then
            combine_args=$combine_args" ./manifest/compose/le.panel.yml"
        else
            combine_args=$combine_args" ./manifest/compose/le.daemon.yml"
        fi
    fi

    # Adds build parameters to the final compose file
    # This will allow building of images
    if [ "$enable_build_options" == "x" ]; then
        echo "Adding build options to compose file..."
        combine_args=$combine_args" ./manifest/compose/build.yml"
        
        # Checks if variables exist within .env
        echo "Adding Build Variables to .env..."
        if grep -q "PANEL_VERSION=" .env; then
            sed -i "s/PANEL_VERSION=.*/$(grep "PANEL_VERSION=" manifest/version.txt)/" .env
        else
            grep "PANEL_VERSION=" manifest/version.txt >> .env
        fi
        # Checks if variables exist within .env
        if grep -q "DAEMON_VERSION=" .env; then
            sed -i "s/DAEMON_VERSION=.*/$(grep "DAEMON_VERSION=" manifest/version.txt)/" .env
        else
            grep "DAEMON_VERSION=" manifest/version.txt >> .env
        fi
    fi

    IFS=" "
    bin/yq merge -a -x ${combine_args} | bin/yq read --stripComments - > docker-compose.yml

    # Modifiers for compose file
    if [ ! "$node_directory" == "" ] && [ "$enable_service_node" == "x" ]; then
        bin/yq write -i docker-compose.yml "services.daemon.volumes[0]" "$node_directory:$node_directory"
    fi

    if [ ! "$database_ip_address" == "" ] && [ "$enable_service_db" == "x" ]; then
        bin/yq write -i docker-compose.yml "services.mysql.ports[0]" "$database_ip_address:3306"
    fi

    if ! [ -d "conf.d" ]; then
        mkdir conf.d
        cp ./manifest/config/* conf.d -rpv
    fi
}

# Fixing some nonsense with function returning
IFS=

_COMPOSE_EXE="$(command -v docker-compose)"

if [[ -z "$_COMPOSE_EXE" ]]; then
    echo "docker-compose not found, exiting..."
    exit 2
fi

cd "$(dirname $0)/../"

# Split our arguements into seperate sections
_command=()
for ((i=1; i<=$#; i++)); do
    if [[ "${!i}" =~ "--" || ${!i} =~ "-" ]]; then
        case ${!i} in
            --help | -h)
                _return_help
                exit
                ;;
            # Enable Services
            --enable-daemon) # Enables wings
                enable_service_node="x"
                ;;
            --enable-panel) # Enables panel
                enable_service_panel="x"
                ;;
            --enable-db) # Enables Database
                enable_service_db="x"
                ;;
            --enable-letsencrypt) # Enable Let's Encrypt
                enable_service_le="x"
                ;;
            --enable-build-options)
                enable_build_options="x"
                ;;
            # Modify Certain runtime options
            --daemon-dir)
                ((i++))
                node_directory="${!i}"
                ;;
            --db-address)
               ((i++))
               database_ip_address="${!i}"
               ;;
        esac
    else
        _command+=("${!i}")
    fi
done

build_config
